-- VHDL Entity reed_lib.tops.symbol
--
-- Created:
--          by - mbatu.UNKNOWN (MONSTER)
--          at - 10:39:04 08/ 1/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2021.1 Built on 14 Jan 2021 at 15:11:42
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY tops IS
   PORT( 
      clk_i                : IN     STD_LOGIC;
      rst_i                : IN     STD_LOGIC;
      t_in_data_i          : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      t_in_valid_i         : IN     STD_LOGIC;
      cry_v_data_o         : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      cry_v_valid_o        : OUT    STD_LOGIC;
      err_count_in_frame_o : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      err_in_frame_o       : OUT    STD_LOGIC;
      frame_data_o         : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      frame_valid_o        : OUT    STD_LOGIC;
      t_in_ready_o         : OUT    STD_LOGIC
   );

-- Declarations

END tops ;

--
-- VHDL Architecture reed_lib.tops.struct
--
-- Created:
--          by - mbatu.UNKNOWN (MONSTER)
--          at - 10:39:04 08/ 1/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2021.1 Built on 14 Jan 2021 at 15:11:42
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.numeric_std.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;


ARCHITECTURE struct OF tops IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL addr_a                : INTEGER RANGE 0 TO 159;
   SIGNAL addr_b                : INTEGER RANGE 0 TO 159;
   SIGNAL cry_ready_i           : STD_LOGIC;
   SIGNAL cry_valid_o           : STD_LOGIC;
   SIGNAL crydata_o             : STD_LOGIC;
   SIGNAL crydata_v_o           : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL crydata_v_valid_o     : STD_LOGIC;
   SIGNAL data_a                : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL data_b                : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL data_i                : STD_LOGIC;
   SIGNAL data_i1               : STD_LOGIC;
   SIGNAL data_ready_o          : STD_LOGIC;
   SIGNAL data_ready_o1         : STD_LOGIC;
   SIGNAL data_valid_i          : STD_LOGIC;
   SIGNAL data_valid_i1         : STD_LOGIC;
   SIGNAL dec_status_tdata_i    : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL dec_status_valid_i    : STD_LOGIC;
   SIGNAL decoder_output_tdata  : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL decoder_output_tlast  : STD_LOGIC;
   SIGNAL decoder_output_tready : STD_LOGIC;
   SIGNAL decoder_output_tvalid : STD_LOGIC;
   SIGNAL decoder_tlast_o       : STD_LOGIC;
   SIGNAL frame_data_i          : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL frame_ready_o         : STD_LOGIC;
   SIGNAL frame_tlast_i         : STD_LOGIC;
   SIGNAL frame_valid_i         : STD_LOGIC;
   SIGNAL inter_tlast_o         : STD_LOGIC;
   SIGNAL m_axis_data_tdata     : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL m_axis_data_tdata1    : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL m_axis_data_tlast     : STD_LOGIC;
   SIGNAL m_axis_data_tlast1    : STD_LOGIC;
   SIGNAL m_axis_data_tready    : STD_LOGIC;
   SIGNAL m_axis_data_tready1   : STD_LOGIC;
   SIGNAL m_axis_data_tvalid    : STD_LOGIC;
   SIGNAL m_axis_data_tvalid1   : STD_LOGIC;
   SIGNAL m_axis_output_tdata   : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL m_axis_output_tlast   : STD_LOGIC;
   SIGNAL m_axis_output_tready  : STD_LOGIC;
   SIGNAL m_axis_output_tvalid  : STD_LOGIC;
   SIGNAL q_b                   : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL s_axis_data_tdata     : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL s_axis_data_tlast     : STD_LOGIC;
   SIGNAL s_axis_data_tready    : STD_LOGIC;
   SIGNAL s_axis_data_tvalid    : STD_LOGIC;
   SIGNAL status_ready_o        : STD_LOGIC;
   SIGNAL t_last_o              : STD_LOGIC;
   SIGNAL t_out_data_o          : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL t_out_ready_i         : STD_LOGIC;
   SIGNAL t_out_valid_o         : STD_LOGIC;
   SIGNAL t_user_o              : STD_LOGIC;
   SIGNAL we_a                  : STD_LOGIC;
   SIGNAL we_b                  : STD_LOGIC;


   -- Component Declarations
   COMPONENT deinter_dec
   GENERIC (
      h_sync_error : INTEGER := 192
   );
   PORT (
      clk_i                  : IN     STD_LOGIC;
      de_inter_output_tready : IN     STD_LOGIC;
      de_inter_output_tvalid : IN     STD_LOGIC;
      rst_i                  : IN     STD_LOGIC;
      decoder_tlast_o        : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT dual_port_bram
   GENERIC (
      DATA_WIDTH : INTEGER := 8;
      ADDR_DEPTH : INTEGER := 160
   );
   PORT (
      addr_a : IN     INTEGER RANGE 0 TO ADDR_DEPTH - 1;
      addr_b : IN     INTEGER RANGE 0 TO ADDR_DEPTH - 1;
      clk    : IN     STD_LOGIC;
      data_a : IN     STD_LOGIC_VECTOR ((DATA_WIDTH - 1) DOWNTO 0);
      data_b : IN     STD_LOGIC_VECTOR ((DATA_WIDTH - 1) DOWNTO 0);
      we_a   : IN     STD_LOGIC;
      we_b   : IN     STD_LOGIC;
      q_a    : OUT    STD_LOGIC_VECTOR ((DATA_WIDTH - 1) DOWNTO 0);
      q_b    : OUT    STD_LOGIC_VECTOR ((DATA_WIDTH - 1) DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT encoder_inter
   PORT (
      clk_i                 : IN     STD_LOGIC;
      encoder_input_tlast_i : IN     STD_LOGIC;
      rst_i                 : IN     STD_LOGIC;
      inter_tlast_o         : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT err_ctrl
   GENERIC (
      DATA_WIDTH : INTEGER := 8;
      ADDR_DEPTH : INTEGER := 160
   );
   PORT (
      clk_i                : IN     STD_LOGIC;
      dec_status_tdata_i   : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      dec_status_valid_i   : IN     STD_LOGIC;
      frame_data_i         : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      frame_tlast_i        : IN     STD_LOGIC;
      frame_valid_i        : IN     STD_LOGIC;
      q_b                  : IN     STD_LOGIC_VECTOR ((DATA_WIDTH - 1) DOWNTO 0);
      rst_i                : IN     STD_LOGIC;
      addr_a               : OUT    INTEGER RANGE 0 TO ADDR_DEPTH - 1;
      addr_b               : OUT    INTEGER RANGE 0 TO ADDR_DEPTH - 1;
      data_a               : OUT    STD_LOGIC_VECTOR ((DATA_WIDTH - 1) DOWNTO 0);
      err_count_in_frame_o : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      err_in_frame_o       : OUT    STD_LOGIC;
      frame_data_o         : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      frame_ready_o        : OUT    STD_LOGIC;
      frame_valid_o        : OUT    STD_LOGIC;
      status_ready_o       : OUT    STD_LOGIC;
      we_a                 : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT fifo
   GENERIC (
      ram_width : natural := 8;
      ram_depth : natural := 25500000
   );
   PORT (
      clk        : IN     std_logic;
      in_data    : IN     std_logic_vector (ram_width - 1 DOWNTO 0);
      in_valid   : IN     std_logic;
      out_ready  : IN     std_logic;
      rst        : IN     std_logic;
      in_ready   : OUT    std_logic;
      out_data   : OUT    std_logic_vector (ram_width - 1 DOWNTO 0);
      out_data_o : OUT    std_logic;
      out_valid  : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT noise_gen
   PORT (
      aclk                  : IN     STD_LOGIC;
      aresetn               : IN     STD_LOGIC;
      decoder_output_tready : IN     STD_LOGIC;
      encoder_input_tdata   : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      encoder_input_tlast   : IN     STD_LOGIC;
      encoder_input_tvalid  : IN     STD_LOGIC;
      decoder_output_tdata  : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      decoder_output_tlast  : OUT    STD_LOGIC;
      decoder_output_tvalid : OUT    STD_LOGIC;
      encoder_input_tready  : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT pattern_generator_r2
   GENERIC (
      v_sync    : INTEGER := 240;
      h_sync    : INTEGER := 160;
      RAM_WIDTH : NATURAL := 72;
      RAM_DEPTH : NATURAL := 255
   );
   PORT (
      clk_i         : IN     STD_LOGIC;
      rst_i         : IN     STD_LOGIC;
      t_in_data_i   : IN     STD_LOGIC_VECTOR (RAM_WIDTH-1 DOWNTO 0);
      t_in_valid_i  : IN     STD_LOGIC;
      t_out_ready_i : IN     STD_LOGIC;
      t_in_ready_o  : OUT    STD_LOGIC;
      t_last_o      : OUT    STD_LOGIC;
      t_out_data_o  : OUT    STD_LOGIC_VECTOR (RAM_WIDTH-1 DOWNTO 0);
      t_out_valid_o : OUT    STD_LOGIC;
      t_user_o      : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT rs_decoder_0
   PORT (
      aclk                           : IN     STD_LOGIC;
      aresetn                        : IN     STD_LOGIC;
      m_axis_output_tready           : IN     STD_LOGIC;
      m_axis_stat_tready             : IN     STD_LOGIC;
      s_axis_input_tdata             : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      s_axis_input_tlast             : IN     STD_LOGIC;
      s_axis_input_tvalid            : IN     STD_LOGIC;
      event_s_ctrl_tdata_invalid     : OUT    STD_LOGIC;
      event_s_input_tlast_missing    : OUT    STD_LOGIC;
      event_s_input_tlast_unexpected : OUT    STD_LOGIC;
      m_axis_output_tdata            : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      m_axis_output_tlast            : OUT    STD_LOGIC;
      m_axis_output_tvalid           : OUT    STD_LOGIC;
      m_axis_stat_tdata              : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      m_axis_stat_tvalid             : OUT    STD_LOGIC;
      s_axis_input_tready            : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT rs_encoder_0
   PORT (
      aclk                           : IN     STD_LOGIC;
      aresetn                        : IN     STD_LOGIC;
      m_axis_output_tready           : IN     STD_LOGIC;
      s_axis_input_tdata             : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      s_axis_input_tlast             : IN     STD_LOGIC;
      s_axis_input_tvalid            : IN     STD_LOGIC;
      event_s_input_tlast_missing    : OUT    STD_LOGIC;
      event_s_input_tlast_unexpected : OUT    STD_LOGIC;
      m_axis_output_tdata            : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      m_axis_output_tlast            : OUT    STD_LOGIC;
      m_axis_output_tvalid           : OUT    STD_LOGIC;
      s_axis_input_tready            : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT sid_0
   PORT (
      aclk                   : IN     STD_LOGIC;
      aresetn                : IN     STD_LOGIC;
      m_axis_data_tready     : IN     STD_LOGIC;
      s_axis_data_tdata      : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      s_axis_data_tlast      : IN     STD_LOGIC;
      s_axis_data_tvalid     : IN     STD_LOGIC;
      event_halted           : OUT    STD_LOGIC;
      event_tlast_missing    : OUT    STD_LOGIC;
      event_tlast_unexpected : OUT    STD_LOGIC;
      m_axis_data_tdata      : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      m_axis_data_tlast      : OUT    STD_LOGIC;
      m_axis_data_tvalid     : OUT    STD_LOGIC;
      s_axis_data_tready     : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT sid_de_interleaver
   PORT (
      aclk                   : IN     STD_LOGIC;
      aresetn                : IN     STD_LOGIC;
      m_axis_data_tready     : IN     STD_LOGIC;
      s_axis_data_tdata      : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      s_axis_data_tlast      : IN     STD_LOGIC;
      s_axis_data_tvalid     : IN     STD_LOGIC;
      event_halted           : OUT    STD_LOGIC;
      event_tlast_missing    : OUT    STD_LOGIC;
      event_tlast_unexpected : OUT    STD_LOGIC;
      m_axis_data_tdata      : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      m_axis_data_tlast      : OUT    STD_LOGIC;
      m_axis_data_tvalid     : OUT    STD_LOGIC;
      s_axis_data_tready     : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT trivium_core
   PORT (
      SYS_CLK           : IN     STD_LOGIC;
      cry_ready_i       : IN     STD_LOGIC;
      data_i            : IN     STD_LOGIC;
      data_valid_i      : IN     STD_LOGIC;
      rst_i             : IN     STD_LOGIC;
      cry_valid_o       : OUT    STD_LOGIC;
      crydata_o         : OUT    STD_LOGIC;
      crydata_v_o       : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      crydata_v_valid_o : OUT    STD_LOGIC;
      data_ready_o      : OUT    STD_LOGIC
   );
   END COMPONENT;


BEGIN

   -- ModuleWare code(v1.12) for instance 'buff1' of 'buff'
   cry_v_valid_o <= crydata_v_valid_o;

   -- ModuleWare code(v1.12) for instance 'buff2' of 'buff'
   cry_v_data_o <= crydata_v_o;

   -- ModuleWare code(v1.12) for instance 'gnd1' of 'gnd'
   data_b <= (OTHERS => '0');

   -- ModuleWare code(v1.12) for instance 'gnd2' of 'gnd'
   we_b <= '0';

   -- Instance port mappings.
   deinter_dec1 : deinter_dec
      GENERIC MAP (
         h_sync_error => 192
      )
      PORT MAP (
         clk_i                  => clk_i,
         rst_i                  => rst_i,
         de_inter_output_tvalid => m_axis_data_tready1,
         de_inter_output_tready => m_axis_data_tvalid1,
         decoder_tlast_o        => decoder_tlast_o
      );
   dual_port_bram1 : dual_port_bram
      GENERIC MAP (
         DATA_WIDTH => 8,
         ADDR_DEPTH => 160
      )
      PORT MAP (
         clk    => clk_i,
         addr_a => addr_a,
         addr_b => addr_b,
         data_a => data_a,
         data_b => data_b,
         we_a   => we_a,
         we_b   => we_b,
         q_a    => OPEN,
         q_b    => q_b
      );
   encoder_inter1 : encoder_inter
      PORT MAP (
         clk_i                 => clk_i,
         rst_i                 => rst_i,
         encoder_input_tlast_i => m_axis_output_tlast,
         inter_tlast_o         => inter_tlast_o
      );
   err_ctrl1 : err_ctrl
      PORT MAP (
         clk_i                => clk_i,
         rst_i                => rst_i,
         frame_data_i         => frame_data_i,
         frame_tlast_i        => frame_tlast_i,
         frame_valid_i        => frame_valid_i,
         frame_ready_o        => frame_ready_o,
         status_ready_o       => status_ready_o,
         dec_status_tdata_i   => dec_status_tdata_i,
         dec_status_valid_i   => dec_status_valid_i,
         frame_data_o         => frame_data_o,
         err_count_in_frame_o => err_count_in_frame_o,
         err_in_frame_o       => err_in_frame_o,
         frame_valid_o        => frame_valid_o,
         addr_a               => addr_a,
         addr_b               => addr_b,
         data_a               => data_a,
         we_a                 => we_a,
         q_b                  => q_b
      );
   fifo1 : fifo
      GENERIC MAP (
         ram_width => 8,
         ram_depth => 255000
      )
      PORT MAP (
         clk        => clk_i,
         rst        => rst_i,
         in_ready   => m_axis_data_tready,
         in_valid   => m_axis_data_tvalid,
         in_data    => m_axis_data_tdata,
         out_data_o => data_i,
         out_ready  => data_ready_o,
         out_valid  => data_valid_i,
         out_data   => OPEN
      );
   fifo2 : fifo
      GENERIC MAP (
         ram_width => 8,
         ram_depth => 255000
      )
      PORT MAP (
         clk        => clk_i,
         rst        => rst_i,
         in_ready   => decoder_output_tready,
         in_valid   => decoder_output_tvalid,
         in_data    => decoder_output_tdata,
         out_data_o => data_i1,
         out_ready  => data_ready_o1,
         out_valid  => data_valid_i1,
         out_data   => OPEN
      );
   noise_gen1 : noise_gen
      PORT MAP (
         aclk                  => clk_i,
         aresetn               => rst_i,
         encoder_input_tdata   => crydata_v_o,
         encoder_input_tvalid  => crydata_v_valid_o,
         encoder_input_tlast   => m_axis_data_tlast,
         encoder_input_tready  => cry_ready_i,
         decoder_output_tdata  => decoder_output_tdata,
         decoder_output_tvalid => decoder_output_tvalid,
         decoder_output_tready => decoder_output_tready,
         decoder_output_tlast  => decoder_output_tlast
      );
   pattern_generator_r3 : pattern_generator_r2
      GENERIC MAP (
         v_sync    => 240,
         h_sync    => 160,
         RAM_WIDTH => 8,
         RAM_DEPTH => 255
      )
      PORT MAP (
         clk_i         => clk_i,
         rst_i         => rst_i,
         t_in_data_i   => t_in_data_i,
         t_in_valid_i  => t_in_valid_i,
         t_in_ready_o  => t_in_ready_o,
         t_out_ready_i => t_out_ready_i,
         t_out_data_o  => t_out_data_o,
         t_out_valid_o => t_out_valid_o,
         t_last_o      => t_last_o,
         t_user_o      => t_user_o
      );
   rs_decoder_1 : rs_decoder_0
      PORT MAP (
         aclk                           => clk_i,
         aresetn                        => rst_i,
         s_axis_input_tdata             => m_axis_data_tdata1,
         s_axis_input_tvalid            => m_axis_data_tvalid1,
         s_axis_input_tlast             => decoder_tlast_o,
         s_axis_input_tready            => m_axis_data_tready1,
         m_axis_output_tdata            => frame_data_i,
         m_axis_output_tvalid           => frame_valid_i,
         m_axis_output_tready           => frame_ready_o,
         m_axis_output_tlast            => frame_tlast_i,
         m_axis_stat_tdata              => dec_status_tdata_i,
         m_axis_stat_tvalid             => dec_status_valid_i,
         m_axis_stat_tready             => status_ready_o,
         event_s_input_tlast_missing    => OPEN,
         event_s_input_tlast_unexpected => OPEN,
         event_s_ctrl_tdata_invalid     => OPEN
      );
   rs_encoder_1 : rs_encoder_0
      PORT MAP (
         aclk                           => clk_i,
         aresetn                        => rst_i,
         s_axis_input_tdata             => t_out_data_o,
         s_axis_input_tvalid            => t_out_valid_o,
         s_axis_input_tready            => t_out_ready_i,
         s_axis_input_tlast             => t_last_o,
         m_axis_output_tdata            => m_axis_output_tdata,
         m_axis_output_tvalid           => m_axis_output_tvalid,
         m_axis_output_tready           => m_axis_output_tready,
         m_axis_output_tlast            => m_axis_output_tlast,
         event_s_input_tlast_missing    => OPEN,
         event_s_input_tlast_unexpected => OPEN
      );
   sid_1 : sid_0
      PORT MAP (
         aclk                   => clk_i,
         aresetn                => rst_i,
         s_axis_data_tdata      => m_axis_output_tdata,
         s_axis_data_tvalid     => m_axis_output_tvalid,
         s_axis_data_tlast      => inter_tlast_o,
         s_axis_data_tready     => m_axis_output_tready,
         m_axis_data_tdata      => m_axis_data_tdata,
         m_axis_data_tvalid     => m_axis_data_tvalid,
         m_axis_data_tlast      => m_axis_data_tlast,
         m_axis_data_tready     => m_axis_data_tready,
         event_tlast_unexpected => OPEN,
         event_tlast_missing    => OPEN,
         event_halted           => OPEN
      );
   sid_de_interleaver1 : sid_de_interleaver
      PORT MAP (
         aclk                   => clk_i,
         aresetn                => rst_i,
         s_axis_data_tdata      => s_axis_data_tdata,
         s_axis_data_tvalid     => s_axis_data_tvalid,
         s_axis_data_tlast      => s_axis_data_tlast,
         s_axis_data_tready     => s_axis_data_tready,
         m_axis_data_tdata      => m_axis_data_tdata1,
         m_axis_data_tvalid     => m_axis_data_tvalid1,
         m_axis_data_tlast      => m_axis_data_tlast1,
         m_axis_data_tready     => m_axis_data_tready1,
         event_tlast_unexpected => OPEN,
         event_tlast_missing    => OPEN,
         event_halted           => OPEN
      );
   trivium_core1 : trivium_core
      PORT MAP (
         SYS_CLK           => clk_i,
         rst_i             => rst_i,
         data_valid_i      => data_valid_i,
         data_ready_o      => data_ready_o,
         data_i            => data_i,
         cry_ready_i       => cry_ready_i,
         cry_valid_o       => cry_valid_o,
         crydata_v_valid_o => crydata_v_valid_o,
         crydata_v_o       => crydata_v_o,
         crydata_o         => crydata_o
      );
   trivium_core2 : trivium_core
      PORT MAP (
         SYS_CLK           => clk_i,
         rst_i             => rst_i,
         data_valid_i      => data_valid_i1,
         data_ready_o      => data_ready_o1,
         data_i            => data_i1,
         cry_ready_i       => s_axis_data_tready,
         cry_valid_o       => OPEN,
         crydata_v_valid_o => s_axis_data_tvalid,
         crydata_v_o       => s_axis_data_tdata,
         crydata_o         => OPEN
      );

END struct;
